// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: command/v1/command.proto

package commandv1

import (
	v1 "github.com/yarefs/carnax/gen/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandType int32

const (
	CommandType_COMMAND_TYPE_UNSPECIFIED          CommandType = 0
	CommandType_COMMAND_TYPE_CREATE_TOPIC         CommandType = 1
	CommandType_COMMAND_TYPE_RESERVE_ADDRESS      CommandType = 2
	CommandType_COMMAND_TYPE_WRITE_MESSAGE        CommandType = 3
	CommandType_COMMAND_TYPE_FLUSH_SEGMENT        CommandType = 4
	CommandType_COMMAND_TYPE_READ_MESSAGE         CommandType = 5
	CommandType_COMMAND_TYPE_SUBSCRIBE_TOPIC      CommandType = 6
	CommandType_COMMAND_TYPE_ASSIGN_PARTITIONS    CommandType = 7
	CommandType_COMMAND_TYPE_REBALANCE_PARTITIONS CommandType = 8
	CommandType_COMMAND_TYPE_POLL_MESSAGES        CommandType = 9
	CommandType_COMMAND_TYPE_COMMIT_SYNC          CommandType = 10
	// ASYNC
	CommandType_COMMAND_TYPE_SOFT_COMMIT CommandType = 11
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0:  "COMMAND_TYPE_UNSPECIFIED",
		1:  "COMMAND_TYPE_CREATE_TOPIC",
		2:  "COMMAND_TYPE_RESERVE_ADDRESS",
		3:  "COMMAND_TYPE_WRITE_MESSAGE",
		4:  "COMMAND_TYPE_FLUSH_SEGMENT",
		5:  "COMMAND_TYPE_READ_MESSAGE",
		6:  "COMMAND_TYPE_SUBSCRIBE_TOPIC",
		7:  "COMMAND_TYPE_ASSIGN_PARTITIONS",
		8:  "COMMAND_TYPE_REBALANCE_PARTITIONS",
		9:  "COMMAND_TYPE_POLL_MESSAGES",
		10: "COMMAND_TYPE_COMMIT_SYNC",
		11: "COMMAND_TYPE_SOFT_COMMIT",
	}
	CommandType_value = map[string]int32{
		"COMMAND_TYPE_UNSPECIFIED":          0,
		"COMMAND_TYPE_CREATE_TOPIC":         1,
		"COMMAND_TYPE_RESERVE_ADDRESS":      2,
		"COMMAND_TYPE_WRITE_MESSAGE":        3,
		"COMMAND_TYPE_FLUSH_SEGMENT":        4,
		"COMMAND_TYPE_READ_MESSAGE":         5,
		"COMMAND_TYPE_SUBSCRIBE_TOPIC":      6,
		"COMMAND_TYPE_ASSIGN_PARTITIONS":    7,
		"COMMAND_TYPE_REBALANCE_PARTITIONS": 8,
		"COMMAND_TYPE_POLL_MESSAGES":        9,
		"COMMAND_TYPE_COMMIT_SYNC":          10,
		"COMMAND_TYPE_SOFT_COMMIT":          11,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_v1_command_proto_enumTypes[0].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_command_v1_command_proto_enumTypes[0]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{0}
}

type ResetPoint int32

const (
	ResetPoint_RESET_POINT_UNSPECIFIED ResetPoint = 0
	ResetPoint_RESET_POINT_EXACT       ResetPoint = 1
	ResetPoint_RESET_POINT_EARLIEST    ResetPoint = 2
	// is this necessary yet?
	ResetPoint_RESET_POINT_LATEST ResetPoint = 3
)

// Enum value maps for ResetPoint.
var (
	ResetPoint_name = map[int32]string{
		0: "RESET_POINT_UNSPECIFIED",
		1: "RESET_POINT_EXACT",
		2: "RESET_POINT_EARLIEST",
		3: "RESET_POINT_LATEST",
	}
	ResetPoint_value = map[string]int32{
		"RESET_POINT_UNSPECIFIED": 0,
		"RESET_POINT_EXACT":       1,
		"RESET_POINT_EARLIEST":    2,
		"RESET_POINT_LATEST":      3,
	}
)

func (x ResetPoint) Enum() *ResetPoint {
	p := new(ResetPoint)
	*p = x
	return p
}

func (x ResetPoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResetPoint) Descriptor() protoreflect.EnumDescriptor {
	return file_command_v1_command_proto_enumTypes[1].Descriptor()
}

func (ResetPoint) Type() protoreflect.EnumType {
	return &file_command_v1_command_proto_enumTypes[1]
}

func (x ResetPoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResetPoint.Descriptor instead.
func (ResetPoint) EnumDescriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{1}
}

// an address is the offset AND partition index
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset         uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	PartitionIndex uint32 `protobuf:"varint,2,opt,name=partition_index,json=partitionIndex,proto3" json:"partition_index,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Address) GetPartitionIndex() uint32 {
	if x != nil {
		return x.PartitionIndex
	}
	return 0
}

type OffsetResetPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Point   ResetPoint `protobuf:"varint,2,opt,name=point,proto3,enum=command.v1.ResetPoint" json:"point,omitempty"`
}

func (x *OffsetResetPoint) Reset() {
	*x = OffsetResetPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetResetPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetResetPoint) ProtoMessage() {}

func (x *OffsetResetPoint) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetResetPoint.ProtoReflect.Descriptor instead.
func (*OffsetResetPoint) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetResetPoint) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OffsetResetPoint) GetPoint() ResetPoint {
	if x != nil {
		return x.Point
	}
	return ResetPoint_RESET_POINT_UNSPECIFIED
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=command.v1.CommandType" json:"type,omitempty"`
	// Types that are assignable to Command:
	//
	//	*Command_CreateTopic
	//	*Command_ReserveAddress
	//	*Command_WriteMessage
	//	*Command_FlushSegment
	//	*Command_ReadMessage
	//	*Command_SubscribeTopic
	//	*Command_AssignPartitions
	//	*Command_RebalancePartitions
	//	*Command_PollMessages
	//	*Command_CommitSync
	//	*Command_SoftCommit
	Command isCommand_Command `protobuf_oneof:"command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetType() CommandType {
	if x != nil {
		return x.Type
	}
	return CommandType_COMMAND_TYPE_UNSPECIFIED
}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *Command) GetCreateTopic() *CreateTopicCommand {
	if x, ok := x.GetCommand().(*Command_CreateTopic); ok {
		return x.CreateTopic
	}
	return nil
}

func (x *Command) GetReserveAddress() *ReserveAddressCommand {
	if x, ok := x.GetCommand().(*Command_ReserveAddress); ok {
		return x.ReserveAddress
	}
	return nil
}

func (x *Command) GetWriteMessage() *WriteMessageCommand {
	if x, ok := x.GetCommand().(*Command_WriteMessage); ok {
		return x.WriteMessage
	}
	return nil
}

func (x *Command) GetFlushSegment() *FlushSegmentCommand {
	if x, ok := x.GetCommand().(*Command_FlushSegment); ok {
		return x.FlushSegment
	}
	return nil
}

func (x *Command) GetReadMessage() *ReadMessageCommand {
	if x, ok := x.GetCommand().(*Command_ReadMessage); ok {
		return x.ReadMessage
	}
	return nil
}

func (x *Command) GetSubscribeTopic() *SubscribeTopicCommand {
	if x, ok := x.GetCommand().(*Command_SubscribeTopic); ok {
		return x.SubscribeTopic
	}
	return nil
}

func (x *Command) GetAssignPartitions() *AssignPartitionsCommand {
	if x, ok := x.GetCommand().(*Command_AssignPartitions); ok {
		return x.AssignPartitions
	}
	return nil
}

func (x *Command) GetRebalancePartitions() *RebalancePartitionsCommand {
	if x, ok := x.GetCommand().(*Command_RebalancePartitions); ok {
		return x.RebalancePartitions
	}
	return nil
}

func (x *Command) GetPollMessages() *PollMessagesCommand {
	if x, ok := x.GetCommand().(*Command_PollMessages); ok {
		return x.PollMessages
	}
	return nil
}

func (x *Command) GetCommitSync() *CommitSyncCommand {
	if x, ok := x.GetCommand().(*Command_CommitSync); ok {
		return x.CommitSync
	}
	return nil
}

func (x *Command) GetSoftCommit() *SoftCommitCommand {
	if x, ok := x.GetCommand().(*Command_SoftCommit); ok {
		return x.SoftCommit
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_CreateTopic struct {
	CreateTopic *CreateTopicCommand `protobuf:"bytes,2,opt,name=create_topic,json=createTopic,proto3,oneof"`
}

type Command_ReserveAddress struct {
	ReserveAddress *ReserveAddressCommand `protobuf:"bytes,3,opt,name=reserve_address,json=reserveAddress,proto3,oneof"`
}

type Command_WriteMessage struct {
	WriteMessage *WriteMessageCommand `protobuf:"bytes,4,opt,name=write_message,json=writeMessage,proto3,oneof"`
}

type Command_FlushSegment struct {
	FlushSegment *FlushSegmentCommand `protobuf:"bytes,5,opt,name=flush_segment,json=flushSegment,proto3,oneof"`
}

type Command_ReadMessage struct {
	ReadMessage *ReadMessageCommand `protobuf:"bytes,6,opt,name=read_message,json=readMessage,proto3,oneof"`
}

type Command_SubscribeTopic struct {
	SubscribeTopic *SubscribeTopicCommand `protobuf:"bytes,7,opt,name=subscribe_topic,json=subscribeTopic,proto3,oneof"`
}

type Command_AssignPartitions struct {
	AssignPartitions *AssignPartitionsCommand `protobuf:"bytes,8,opt,name=assign_partitions,json=assignPartitions,proto3,oneof"`
}

type Command_RebalancePartitions struct {
	RebalancePartitions *RebalancePartitionsCommand `protobuf:"bytes,9,opt,name=rebalance_partitions,json=rebalancePartitions,proto3,oneof"`
}

type Command_PollMessages struct {
	PollMessages *PollMessagesCommand `protobuf:"bytes,10,opt,name=poll_messages,json=pollMessages,proto3,oneof"`
}

type Command_CommitSync struct {
	CommitSync *CommitSyncCommand `protobuf:"bytes,11,opt,name=commit_sync,json=commitSync,proto3,oneof"`
}

type Command_SoftCommit struct {
	SoftCommit *SoftCommitCommand `protobuf:"bytes,12,opt,name=soft_commit,json=softCommit,proto3,oneof"`
}

func (*Command_CreateTopic) isCommand_Command() {}

func (*Command_ReserveAddress) isCommand_Command() {}

func (*Command_WriteMessage) isCommand_Command() {}

func (*Command_FlushSegment) isCommand_Command() {}

func (*Command_ReadMessage) isCommand_Command() {}

func (*Command_SubscribeTopic) isCommand_Command() {}

func (*Command_AssignPartitions) isCommand_Command() {}

func (*Command_RebalancePartitions) isCommand_Command() {}

func (*Command_PollMessages) isCommand_Command() {}

func (*Command_CommitSync) isCommand_Command() {}

func (*Command_SoftCommit) isCommand_Command() {}

type CreateTopicCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *v1.TopicConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateTopicCommand) Reset() {
	*x = CreateTopicCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicCommand) ProtoMessage() {}

func (x *CreateTopicCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicCommand.ProtoReflect.Descriptor instead.
func (*CreateTopicCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTopicCommand) GetConfig() *v1.TopicConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ReserveAddressCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ReserveAddressCommand) Reset() {
	*x = ReserveAddressCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAddressCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAddressCommand) ProtoMessage() {}

func (x *ReserveAddressCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAddressCommand.ProtoReflect.Descriptor instead.
func (*ReserveAddressCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveAddressCommand) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReserveAddressCommand) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type WriteMessageCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Record  *v1.Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	Address *Address   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *WriteMessageCommand) Reset() {
	*x = WriteMessageCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMessageCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMessageCommand) ProtoMessage() {}

func (x *WriteMessageCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMessageCommand.ProtoReflect.Descriptor instead.
func (*WriteMessageCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{5}
}

func (x *WriteMessageCommand) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *WriteMessageCommand) GetRecord() *v1.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *WriteMessageCommand) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type FlushSegmentCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushSegmentCommand) Reset() {
	*x = FlushSegmentCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushSegmentCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSegmentCommand) ProtoMessage() {}

func (x *FlushSegmentCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSegmentCommand.ProtoReflect.Descriptor instead.
func (*FlushSegmentCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{6}
}

type ReadMessageCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic string, partitionIndex uint32, offset uint64;
	Topic      string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Address    *Address   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ResetPoint ResetPoint `protobuf:"varint,3,opt,name=reset_point,json=resetPoint,proto3,enum=command.v1.ResetPoint" json:"reset_point,omitempty"`
}

func (x *ReadMessageCommand) Reset() {
	*x = ReadMessageCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageCommand) ProtoMessage() {}

func (x *ReadMessageCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageCommand.ProtoReflect.Descriptor instead.
func (*ReadMessageCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{7}
}

func (x *ReadMessageCommand) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadMessageCommand) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ReadMessageCommand) GetResetPoint() ResetPoint {
	if x != nil {
		return x.ResetPoint
	}
	return ResetPoint_RESET_POINT_UNSPECIFIED
}

// SubscribeTopicCommand is to join a consumer group
// and subscribe to the given topics.
// Registering to join a consumer group leads to a rebalance
// which will result in a new 'generation' of a consumer group.
//
// TODO: heartbeats should be send to the group leader to handle kickouts.
// register auto.offset.reset (earliest or latest).
//
// https://docs.confluent.io/platform/current/clients/consumer.html
type SubscribeTopicCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kafka's group.id
	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic []string `protobuf:"bytes,2,rep,name=topic,proto3" json:"topic,omitempty"`
	// kafka's client.id
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *SubscribeTopicCommand) Reset() {
	*x = SubscribeTopicCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTopicCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTopicCommand) ProtoMessage() {}

func (x *SubscribeTopicCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTopicCommand.ProtoReflect.Descriptor instead.
func (*SubscribeTopicCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeTopicCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeTopicCommand) GetTopic() []string {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *SubscribeTopicCommand) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type AssignPartitionsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionIndices []uint32 `protobuf:"varint,1,rep,packed,name=partition_indices,json=partitionIndices,proto3" json:"partition_indices,omitempty"`
}

func (x *AssignPartitionsCommand) Reset() {
	*x = AssignPartitionsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPartitionsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPartitionsCommand) ProtoMessage() {}

func (x *AssignPartitionsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPartitionsCommand.ProtoReflect.Descriptor instead.
func (*AssignPartitionsCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{9}
}

func (x *AssignPartitionsCommand) GetPartitionIndices() []uint32 {
	if x != nil {
		return x.PartitionIndices
	}
	return nil
}

type RebalancePartitionsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupId string `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
}

func (x *RebalancePartitionsCommand) Reset() {
	*x = RebalancePartitionsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebalancePartitionsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalancePartitionsCommand) ProtoMessage() {}

func (x *RebalancePartitionsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalancePartitionsCommand.ProtoReflect.Descriptor instead.
func (*RebalancePartitionsCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{10}
}

func (x *RebalancePartitionsCommand) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

type PollMessagesCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupId string `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
	ClientId        string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // should this be optional?
}

func (x *PollMessagesCommand) Reset() {
	*x = PollMessagesCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMessagesCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMessagesCommand) ProtoMessage() {}

func (x *PollMessagesCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMessagesCommand.ProtoReflect.Descriptor instead.
func (*PollMessagesCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{11}
}

func (x *PollMessagesCommand) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

func (x *PollMessagesCommand) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type SoftCommitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupId string `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
	ClientId        string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	PartitionIndex  uint32 `protobuf:"varint,3,opt,name=partition_index,json=partitionIndex,proto3" json:"partition_index,omitempty"`
	NextOffsetDelta uint64 `protobuf:"varint,4,opt,name=next_offset_delta,json=nextOffsetDelta,proto3" json:"next_offset_delta,omitempty"`
}

func (x *SoftCommitCommand) Reset() {
	*x = SoftCommitCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftCommitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftCommitCommand) ProtoMessage() {}

func (x *SoftCommitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftCommitCommand.ProtoReflect.Descriptor instead.
func (*SoftCommitCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{12}
}

func (x *SoftCommitCommand) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

func (x *SoftCommitCommand) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SoftCommitCommand) GetPartitionIndex() uint32 {
	if x != nil {
		return x.PartitionIndex
	}
	return 0
}

func (x *SoftCommitCommand) GetNextOffsetDelta() uint64 {
	if x != nil {
		return x.NextOffsetDelta
	}
	return 0
}

type CommitSyncCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupId string `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
}

func (x *CommitSyncCommand) Reset() {
	*x = CommitSyncCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitSyncCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSyncCommand) ProtoMessage() {}

func (x *CommitSyncCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSyncCommand.ProtoReflect.Descriptor instead.
func (*CommitSyncCommand) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{13}
}

func (x *CommitSyncCommand) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

type ReserveAddressCommand_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReserveAddressCommand_Response) Reset() {
	*x = ReserveAddressCommand_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAddressCommand_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAddressCommand_Response) ProtoMessage() {}

func (x *ReserveAddressCommand_Response) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAddressCommand_Response.ProtoReflect.Descriptor instead.
func (*ReserveAddressCommand_Response) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ReserveAddressCommand_Response) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type WriteMessageCommand_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *WriteMessageCommand_Response) Reset() {
	*x = WriteMessageCommand_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMessageCommand_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMessageCommand_Response) ProtoMessage() {}

func (x *WriteMessageCommand_Response) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMessageCommand_Response.ProtoReflect.Descriptor instead.
func (*WriteMessageCommand_Response) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WriteMessageCommand_Response) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type ReadMessageCommand_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *v1.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *ReadMessageCommand_Response) Reset() {
	*x = ReadMessageCommand_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageCommand_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageCommand_Response) ProtoMessage() {}

func (x *ReadMessageCommand_Response) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageCommand_Response.ProtoReflect.Descriptor instead.
func (*ReadMessageCommand_Response) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ReadMessageCommand_Response) GetRecord() *v1.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type SubscribeTopicCommand_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// generation_id increases on every re-balance
	GenerationId uint64 `protobuf:"varint,2,opt,name=generation_id,json=generationId,proto3" json:"generation_id,omitempty"`
}

func (x *SubscribeTopicCommand_Response) Reset() {
	*x = SubscribeTopicCommand_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTopicCommand_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTopicCommand_Response) ProtoMessage() {}

func (x *SubscribeTopicCommand_Response) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTopicCommand_Response.ProtoReflect.Descriptor instead.
func (*SubscribeTopicCommand_Response) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SubscribeTopicCommand_Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeTopicCommand_Response) GetGenerationId() uint64 {
	if x != nil {
		return x.GenerationId
	}
	return 0
}

type PollMessagesCommand_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetsToFetch map[string]*OffsetResetPoint `protobuf:"bytes,1,rep,name=offsets_to_fetch,json=offsetsToFetch,proto3" json:"offsets_to_fetch,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata       *v1.ConsumerGroupNode        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PollMessagesCommand_Response) Reset() {
	*x = PollMessagesCommand_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_v1_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMessagesCommand_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMessagesCommand_Response) ProtoMessage() {}

func (x *PollMessagesCommand_Response) ProtoReflect() protoreflect.Message {
	mi := &file_command_v1_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMessagesCommand_Response.ProtoReflect.Descriptor instead.
func (*PollMessagesCommand_Response) Descriptor() ([]byte, []int) {
	return file_command_v1_command_proto_rawDescGZIP(), []int{11, 0}
}

func (x *PollMessagesCommand_Response) GetOffsetsToFetch() map[string]*OffsetResetPoint {
	if x != nil {
		return x.OffsetsToFetch
	}
	return nil
}

func (x *PollMessagesCommand_Response) GetMetadata() *v1.ConsumerGroupNode {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_command_v1_command_proto protoreflect.FileDescriptor

var file_command_v1_command_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x6f, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xf4, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x40,
	0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x41, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7a,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a,
	0x39, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x39, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x48, 0x0a, 0x1a, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x13, 0x50,
	0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x8a, 0x02, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5f, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x66,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x94, 0x03,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x55,
	0x53, 0x48, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x07, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x10, 0x0b, 0x2a, 0x72, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45,
	0x58, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x42, 0x9a, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x72, 0x65, 0x66, 0x73, 0x2f, 0x63,
	0x61, 0x72, 0x6e, 0x61, 0x78, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_command_v1_command_proto_rawDescOnce sync.Once
	file_command_v1_command_proto_rawDescData = file_command_v1_command_proto_rawDesc
)

func file_command_v1_command_proto_rawDescGZIP() []byte {
	file_command_v1_command_proto_rawDescOnce.Do(func() {
		file_command_v1_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_v1_command_proto_rawDescData)
	})
	return file_command_v1_command_proto_rawDescData
}

var file_command_v1_command_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_command_v1_command_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_command_v1_command_proto_goTypes = []any{
	(CommandType)(0),                       // 0: command.v1.CommandType
	(ResetPoint)(0),                        // 1: command.v1.ResetPoint
	(*Address)(nil),                        // 2: command.v1.Address
	(*OffsetResetPoint)(nil),               // 3: command.v1.OffsetResetPoint
	(*Command)(nil),                        // 4: command.v1.Command
	(*CreateTopicCommand)(nil),             // 5: command.v1.CreateTopicCommand
	(*ReserveAddressCommand)(nil),          // 6: command.v1.ReserveAddressCommand
	(*WriteMessageCommand)(nil),            // 7: command.v1.WriteMessageCommand
	(*FlushSegmentCommand)(nil),            // 8: command.v1.FlushSegmentCommand
	(*ReadMessageCommand)(nil),             // 9: command.v1.ReadMessageCommand
	(*SubscribeTopicCommand)(nil),          // 10: command.v1.SubscribeTopicCommand
	(*AssignPartitionsCommand)(nil),        // 11: command.v1.AssignPartitionsCommand
	(*RebalancePartitionsCommand)(nil),     // 12: command.v1.RebalancePartitionsCommand
	(*PollMessagesCommand)(nil),            // 13: command.v1.PollMessagesCommand
	(*SoftCommitCommand)(nil),              // 14: command.v1.SoftCommitCommand
	(*CommitSyncCommand)(nil),              // 15: command.v1.CommitSyncCommand
	(*ReserveAddressCommand_Response)(nil), // 16: command.v1.ReserveAddressCommand.Response
	(*WriteMessageCommand_Response)(nil),   // 17: command.v1.WriteMessageCommand.Response
	(*ReadMessageCommand_Response)(nil),    // 18: command.v1.ReadMessageCommand.Response
	(*SubscribeTopicCommand_Response)(nil), // 19: command.v1.SubscribeTopicCommand.Response
	(*PollMessagesCommand_Response)(nil),   // 20: command.v1.PollMessagesCommand.Response
	nil,                                    // 21: command.v1.PollMessagesCommand.Response.OffsetsToFetchEntry
	(*v1.TopicConfig)(nil),                 // 22: api.v1.TopicConfig
	(*v1.Record)(nil),                      // 23: api.v1.Record
	(*v1.ConsumerGroupNode)(nil),           // 24: api.v1.ConsumerGroupNode
}
var file_command_v1_command_proto_depIdxs = []int32{
	2,  // 0: command.v1.OffsetResetPoint.address:type_name -> command.v1.Address
	1,  // 1: command.v1.OffsetResetPoint.point:type_name -> command.v1.ResetPoint
	0,  // 2: command.v1.Command.type:type_name -> command.v1.CommandType
	5,  // 3: command.v1.Command.create_topic:type_name -> command.v1.CreateTopicCommand
	6,  // 4: command.v1.Command.reserve_address:type_name -> command.v1.ReserveAddressCommand
	7,  // 5: command.v1.Command.write_message:type_name -> command.v1.WriteMessageCommand
	8,  // 6: command.v1.Command.flush_segment:type_name -> command.v1.FlushSegmentCommand
	9,  // 7: command.v1.Command.read_message:type_name -> command.v1.ReadMessageCommand
	10, // 8: command.v1.Command.subscribe_topic:type_name -> command.v1.SubscribeTopicCommand
	11, // 9: command.v1.Command.assign_partitions:type_name -> command.v1.AssignPartitionsCommand
	12, // 10: command.v1.Command.rebalance_partitions:type_name -> command.v1.RebalancePartitionsCommand
	13, // 11: command.v1.Command.poll_messages:type_name -> command.v1.PollMessagesCommand
	15, // 12: command.v1.Command.commit_sync:type_name -> command.v1.CommitSyncCommand
	14, // 13: command.v1.Command.soft_commit:type_name -> command.v1.SoftCommitCommand
	22, // 14: command.v1.CreateTopicCommand.config:type_name -> api.v1.TopicConfig
	23, // 15: command.v1.WriteMessageCommand.record:type_name -> api.v1.Record
	2,  // 16: command.v1.WriteMessageCommand.address:type_name -> command.v1.Address
	2,  // 17: command.v1.ReadMessageCommand.address:type_name -> command.v1.Address
	1,  // 18: command.v1.ReadMessageCommand.reset_point:type_name -> command.v1.ResetPoint
	2,  // 19: command.v1.ReserveAddressCommand.Response.address:type_name -> command.v1.Address
	2,  // 20: command.v1.WriteMessageCommand.Response.address:type_name -> command.v1.Address
	23, // 21: command.v1.ReadMessageCommand.Response.record:type_name -> api.v1.Record
	21, // 22: command.v1.PollMessagesCommand.Response.offsets_to_fetch:type_name -> command.v1.PollMessagesCommand.Response.OffsetsToFetchEntry
	24, // 23: command.v1.PollMessagesCommand.Response.metadata:type_name -> api.v1.ConsumerGroupNode
	3,  // 24: command.v1.PollMessagesCommand.Response.OffsetsToFetchEntry.value:type_name -> command.v1.OffsetResetPoint
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_command_v1_command_proto_init() }
func file_command_v1_command_proto_init() {
	if File_command_v1_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_command_v1_command_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OffsetResetPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTopicCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ReserveAddressCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WriteMessageCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FlushSegmentCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ReadMessageCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTopicCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AssignPartitionsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RebalancePartitionsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PollMessagesCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SoftCommitCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CommitSyncCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ReserveAddressCommand_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*WriteMessageCommand_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ReadMessageCommand_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTopicCommand_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_v1_command_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PollMessagesCommand_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_command_v1_command_proto_msgTypes[2].OneofWrappers = []any{
		(*Command_CreateTopic)(nil),
		(*Command_ReserveAddress)(nil),
		(*Command_WriteMessage)(nil),
		(*Command_FlushSegment)(nil),
		(*Command_ReadMessage)(nil),
		(*Command_SubscribeTopic)(nil),
		(*Command_AssignPartitions)(nil),
		(*Command_RebalancePartitions)(nil),
		(*Command_PollMessages)(nil),
		(*Command_CommitSync)(nil),
		(*Command_SoftCommit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_v1_command_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_command_v1_command_proto_goTypes,
		DependencyIndexes: file_command_v1_command_proto_depIdxs,
		EnumInfos:         file_command_v1_command_proto_enumTypes,
		MessageInfos:      file_command_v1_command_proto_msgTypes,
	}.Build()
	File_command_v1_command_proto = out.File
	file_command_v1_command_proto_rawDesc = nil
	file_command_v1_command_proto_goTypes = nil
	file_command_v1_command_proto_depIdxs = nil
}
